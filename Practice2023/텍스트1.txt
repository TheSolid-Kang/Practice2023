
-- #ItemTbl1 == 발주정보
-- #ItemTbl2 == 처리내역
-- #ItemTbl3 == 발주정보2
-- #ItemTbl4 == 후공정 발주 정보
-- #ItemTbl5 == 발주입고정보
-- #ItemTbl6 == BOX 입고내역
-- #ItemTbl7 == 컨트롤 데이터

1. '발주정보' 테이블 생성
{
  * @INCOME_NO(입고번호) //매개변수로 받음.

  * MAT_INCOMEHIST 테이블에서
    * '입고번호'가 @INCOME_NO인 행을 
    * '품번' ASC, '입고순번' ASC OPTION (FAST 10)
    * '발주정보' 테이블에 넣는다.

  * '발주정보' 테이블의 비고 업데이트
    * PART_IQCHIST 테이블에서 
      * '입고번호'가 @INCOME_NO이고, 
      * '품번'이 같은 행의 '비고'로
      * '발주정보'테이블의 '비고'를 업데이트 한다.
}
/*
  1. MAT_INCOMEHIST == MES 입고내역 
  2. PART_MAST == MES 품목 마스터
  3. PART_IQCHIST == 수입검사 이력 조회
*/


2. '처리내역' 테이블 생성
{
  * @INCOME_TIME == '발주정보' 테이블의 첫번째 행의 INCOME_TIME(입고시간) 

  * '발주정보'의 첫번째 행의 'INCOME_ID'의 값으로 분기처리
    * IF INCOME_ID의 값이 N'구매입고'인 경우
      * yw_TPUDelvWMS_IF로 '처리내역' 생성한다.
        * yw_TPUDelvWMS_IF 테이블에서 '발주정보'테이블의 첫번째 행과 
        * '협력사내부코드'가 일치하고, 
        * '입고번호'가 일치하고,
        * '주문관리번호'가 일치하고, 
        * '등록일자'가 @INCOME_TIME 이상인 행을 
          //yw_TPDOSPDelvWMS_IF.RegDateTime >= @INCOME_TIME
        * '처리시간' DESC OPTION (FAST 30)으로 정렬하여
        * '처리내역' 테이블에 넣는다. 

    * IF INCOME_ID의 값이 N'사내입고'인 경우
      * yw_TLGInOutDailyWMS_IF로 '처리내역' 생성한다.
        * yw_TLGInOutDailyWMS_IF 테이블에서 '발주정보'테이블의 첫번째 행과 
        * '협력사내부코드'가 일치하고, 
        * '주문관리번호'가 일치하고, 
        * '등록일자'가 @INCOME_TIME 이상인 행을 
          //yw_TPDOSPDelvWMS_IF.RegDateTime >= @INCOME_TIME
        * '처리시간' DESC OPTION (FAST 30)으로 정렬하여
        * '처리내역' 테이블에 넣는다. 

    * IF INCOME_ID의 값이 N'외주입고, 기타입고, 기타입고(ERP(X))'인 경우
      * yw_TPDOSPDelvWMS_IF로 '처리내역' 생성한다.
        * yw_TPDOSPDelvWMS_IF 테이블에서 '발주정보'테이블의 첫번째 행과 
        * '협력사내부코드'가 일치하고, 
        * '입고번호'가 일치하고,
        * '주문관리번호'가 일치하고, 
        * '등록일자'가 @INCOME_TIME 이상인 행을 
          //yw_TPDOSPDelvWMS_IF.RegDateTime >= @INCOME_TIME
        * '처리시간' DESC OPTION (FAST 30)으로 정렬하여
        * '처리내역' 테이블에 넣는다. 
}
/*
  1. 첫번째 행을 사용하는 이유: INCOME_ID로 분기처리할 때 'XX입고'를 기준으로 분기처리 하기 위함.
  -> 두 번째 행부터는 '외주반출', '재고조정' 등이 사용 됨.
  -> 'XX입고': 구매입고, 사내입고,외주입고, 기타입고, 기타입고(ERP(X))
  2. yw_TPUDelvWMS_IF == 구매납품 WMS 인터페이스
  3. yw_TLGInOutDailyWMS_IF == 일일 입출고 WMS 인터페이스
  4. yw_TPDOSPDelvWMS_IF == 외주납품 WMS 인터페이스
*/

3. '발주정보2' 테이블 생성
{  

  * 발주번호 == '발주정보' 테이블의 발주번호 //발주번호는 모든 행이 같음.
  * 발주수량합계== @ERPOrderQty == '처리내역' 테이블에서 'Qty'컬럼의 합계 //SUM(처리내역.Qty)

  * '발주정보'의 첫번째 행의 'INCOME_ID'의 값으로 분기처리
    * IF INCOME_ID의 값이 N'구매입고'인 경우
      * yw_TPUORDPOItemWMS_IF에서
        * '발주번호'가 '발주정보' 테이블의 첫번째 행의 '발주번호'와 일치하고,
        * '발주수량합계'가 '처리내역' 테이블의 Qty 컬럼의 합계와 일치하고,
        * '품목내부코드'가 '발주정보' 테이블의 첫번째 행의 '품목내부코드'와 일치하는 행을
        * '발주정보2' 테이블에 넣는다.

    * IF INCOME_ID의 값이 N'사내입고'인 경우
      * yw_TPDSFCWorkOrderWMS_IF로 '발주정보2' 생성한다.
        * '작업지시번호'가  '발주정보' 테이블의 첫번째 행의 '작업지시번호'와 일치하고,
        * 'IsCancel'가 '1' 이 아니고,
        * 'IsDel'가 '1'이 아닌 행을
        * '발주정보2' 테이블에 넣는다.

    * IF INCOME_ID의 값이 N'외주입고, 기타입고, 기타입고(ERP(X))'인 경우
      * yw_TPDOSPPOItemWMS_IF로 '발주정보2' 생성한다.
        * '발주번호'가 '발주정보' 테이블의 첫번째 행의 '발주번호'와 일치하고,
        * '품목내부코드'가 '발주정보' 테이블의 첫번째 행의 '품목내부코드'와 일치하는 행을
        * '발주정보2' 테이블에 넣는다.
}
/*
  1. 첫번째 행을 사용하는 이유: INCOME_ID로 분기처리할 때 'XX입고'를 기준으로 분기처리 하기 위함.
  -> 두 번째 행부터는 '외주반출', '재고조정' 등이 사용 됨.
  -> 'XX입고': 구매입고, 사내입고, 외주입고, 기타입고, 기타입고(ERP(X))
  2. yw_TPUORDPOItemWMS_IF == 구매발주품목 WMS 인터페이스
  3. yw_TPDSFCWorkOrderWMS_IF == 작업지시 WMS 인터페이스
  4. yw_TPDOSPPOItemWMS_IF == 외주발주품목 WMS 인터페이스
*/


4. '후공정 발주 정보' 생성
{
  * 임시테이블(#IGoodtemSeqTbl)을 생성한다.
    * yw_VPDROUItemProcMatWMS 테이블에서
      * SubItemSeq 컬럼의 값이 '발주정보'테이블의 '품목내부코드'와 같은 행이 있는 경우
      * 해당 행의 ItemSeq(품목내부코드)를
      * #IGoodtemSeqTbl 임시테이블에 넣는다. 

  * '후공정 발주 정보' 테이블을 생성한다.
    * yw_TPDOSPPOItemWMS_IF 테이블에서
      * '품목내부코드'가 임시테이블(#IGoodtemSeqTbl)의 ItemSeq(품목내부코드)와 일치하고,
      * 'LotNo'이 '발주정보' 테이블의 첫번째 행의 'LotNo'과 일치하고, 
      * 'IsCancel'가 '1' 이 아니고,
      * 'IsDel'가 '1'이 아닌 행을
      * '작업지시번호' DESC OPTION (FAST 30)로 정렬하여 
      * '후공정 발주 정보' 테이블에 넣는다.
}
/*
  1. yw_VPDOSPPOItemWMS_IF == 외주발주품목 WMS 인터페이스
*/


5. '발주입고정보' 생성
{
  * MAT_INCOMEHIST(MES 입고내역) 테이블에서
    * 'LotNo'이 '발주정보' 테이블의 첫번째 행의 'LotNo'과 일치하고, 
    * '품목번호'가 '발주정보' 테이블의 첫번째 행의 '품목번호'과 일치하고, 
    * '발주번호'가 '발주정보' 테이블의 첫번째 행의 '발주번호'과 일치하는 행을
    * '생성시간'  DESC OPTION (FAST 50)로 정렬하여
    * '발주입고정보' 테이블에 넣는다.
}
/*
  1. MAT_INCOMEHIST == MES 입고내역 
*/


// 'BOX 입고내역: 해당 시트 그룹박스의 이름이 없어서 임시로 붙인 이름.
6. 'BOX 입고내역' 생성
{
  * MAT_BOXHIST(MES BOX 입고내역) 테이블에서 
    * '입고번호'가 '@INCOME_NO(입고번호)'와 일치하고,
    * '품목번호'가 일치하고,
    * '입고구분'이 일치하는 행을 
    * '자재 팔레트 번호' ASC로 정렬하고, 
    * '자재 박스 번호' ASC OPTION (FAST 250)로 정렬하여
    * 'BOX 입고내역' 테이블에 넣는다.
}
/*
  1. MAT_BOXHIST
*/


//무조건 1개 행만 나와야 함.
7. 컨트롤에 필요한 행 생성 
{
  * SHIP_FROM(협력사)
  * LotNo(LotNo)
  * PART_NO(품번)
  * INCOME_ID(입고구분)
    * '발주정보' 테이블의 첫번째 행의 입고구분을 넣는다.

  * Qty(ERP 전체 발주수량)
    * yw_TPDOSPPOItemWMS_IF 테이블에서
      * '발주번호'가 일치하고,
      * '작업지시번호'가 일치하는 행 중
      * TOP 1: 가장 첫번째 행의 Qty을 넣는다.

  * ERPOrderQty(해당 입고번호의 ERP 발주수량)
    * '처리내역' 테이블에서 'Qty'컬럼의 합계를 넣는다. 
    //SUM(처리내역.Qty) 

  * TOTAL_INSPECTION_QTY(전체 검사 수량(입고완료, 반송 포함) )
    * 'BOX 입고내역' 테이블에서 BOX_QTY 컬럼의 합계를 넣는다.

  * INCOME_QTY(MES 발주 수량)
    * '발주정보' 테이블의 첫번째 행의 INCOME_QTY를 넣는다.

  * INS_RES(검사판정)
    * '발주정보' 테이블의 첫번째 행의 INS_RES를 넣는다.

  * INCOME_STAT(입출하판정)
    * '발주정보' 테이블의 첫번째 행의 INCOME_STAT를 넣는다.

  * ERP_SYNC (ERP연동)
    * ERPOrderQty(해당 입고번호의 ERP 발주수량)의 값이 INCOME_QTY(MES 발주 수량)과 같은 경우
      * 'OK(xxx개)'를 넣는다.
    * ELSE
      * '확인필요'를 넣는다.

  * INCOME_NO(입고번호)
  * WMS_BOX_QTY(WMS창고 박스 개수)
    * 'BOX 입고내역' 테이블의 행의 개수 //COUNT(1)

  * POR_QTY(MES발주수량)

  * QTY_INCOME_COMPLETE(입고완료 수량)
    * '발주입고정보' 테이블에서 INCOME_STAT의 값이 '입고완료'인 행들의 INCOME_QTY(입고수량)의 합

  * QTY_DELIVERY_COMPLETE(납품완료 수량)
    * '발주입고정보' 테이블에서 INCOME_STAT의 값이 '납품완료'인 행들의 INCOME_QTY(입고수량)의 합

  * QTY_OUT_COMPLETE(반출완료 수량)
    * '발주입고정보' 테이블에서 INCOME_STAT의 값이 '반출완료'인 행들의 INCOME_QTY(입고수량)의 합
}


---------------------------------------------------------------------------------------------------------------------------------------


--화면 색상 정보 수정: '#ItemTbl7' 임시테이블 사용


1. '판정정보' 그룹박스 색상 수정
{
  * 'ERP 발주수량' 컨트롤 색상 업데이트
    * ERP발주수량(Qty)의 값이 MES발주수량(POR_QTY)의 값과 같은 경우
      * 색상수정: 파란색
    * ERP발주수량(Qty)의 값이 MES발주수량(POR_QTY)의 값과 다른 경우
      * 색상수정: 빨간색

  * '입고수량' 컨트롤 색상 업데이트 //색상 수정 안 함.

  * '수입검사' 컨트롤 색상 수정
    * 수입검사(INS_RES)의 값이 '합격' or '특채'인 경우
      * 색상수정: 초록색
    * 수입검사(INS_RES)의 값이 '불합격' or NULL 인 경우
      * 색상수정: 빨간색

  * '입고정보' 컨트롤 색상 업데이트
    * 입고정보(INCOME_STAT)의 값이 '입고완료'인 경우 
      * 색상수정: 초록색
    * 입고정보(INCOME_STAT)의 값이 NULL or 'ERP...'인 경우 
      * 색상수정: 빨간색

  * 'ERP연동' 컨트롤 색상 업데이트
    * ERP연동(ERP_SYNC)의 값이 'OK(...)개'인 경우
      * 색상수정: 초록색
    * ERP연동(ERP_SYNC)의 값이 '확인필요'인 경우
      * 색상수정: 빨간색
}


2. '발주정보2' 시트 색상 수정
{
  * '경과1' 컬럼 배경 색상 업데이트
  * 경과1(Calc1) 컬럼의 값이 0보다 큰 경우 
    * 배경 색상수정: 초록색
  * ELSE
    * 배경 색상수정: 빨간색

  * '경과2' 컬럼 배경 색상 업데이트
    * 경과2(Calc2) 컬럼의 값이 0보다 큰 경우 
      * 배경 색상수정: 초록색
    * ELSE
      * 배경 색상수정: 빨간색

  * '경과2' 컬럼 배경 색상 업데이트
    * 경과2(Calc2) 컬럼의 값이 0보다 큰 경우 
      * 배경 색상수정: 초록색
    * ELSE
      * 배경 색상수정: 빨간색
}


3. '후공정발주정보' 시트 색상 수정
{
  * '협력사' 셀 배경 색상 업데이트
    * 해당 시트에 데이터가 있는 경우 
      * 배경 색상수정: 빨간색
}


4. '발주입고정보' 그룹박스 색상 수정
{
  * '입고완료' 컨트롤러 색상 업데이트
    * 입고완료(QTY_INCOME_COMPLETE) 컨트롤러의 값에 N'100%' 문자열이 포함 된 경우
      * 색상변경: 빨간색

}


5. '발주입고정보' 시트 색상 수정
{
  * '입고번호' 셀 배경 색상 업데이트
    * 해당 시트의 입고번호 셀의 값이 'INCOME_NO'과 같은 경우
      * 배경 색상변경: 초록색
}

//'BOX 입고내역' == 해당 그룹박스의 이름이 없어서 임시로 붙인 이름.
6. 'BOX 입고내역' 그룹박스 색상 수정
{
  * WMS 창고 박스 개수(WMS_BOX_QTY)의 개수가 '발주정보' 시트의 첫번째 행의 박스수량(BOX_CNT) 개수가 같거나
  * or 전체 검사 수량(TOTAL_INSPECTION_QTY)의 개수가 MES입고수량(INCOME_QTY) 개수와 같은 경우
    * 해당 그룹 내 모든 컨트롤러에 대해
      * 색상수정: 파란색
  * ELSE
    * 해당 그룹 내 모든 컨트롤러에 대해
      * 색상수정: 빨간색
}